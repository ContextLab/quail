{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import quail\n",
    "from quail import Fingerprint, OptimalPresenter\n",
    "import seaborn as sns\n",
    "from scipy.spatial.distance import cdist\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# nperms=100\n",
    "# dist_stick = []\n",
    "# dist_beststick = []\n",
    "# dist_perm = []\n",
    "# dist_permde = []\n",
    "# dist_rand = []\n",
    "# dist_bestchoice = []\n",
    "    \n",
    "# for iperm in range(nperms):\n",
    "    \n",
    "#     presenter.strategy = 'stabilize'\n",
    "    \n",
    "# #     # random\n",
    "#     shuffled_egg = presenter.order(egg, strategy='random')\n",
    "#     weights_rand = quail.analyze(shuffled_egg, analysis='fingerprint')\n",
    "#     dist_rand.append(cdist(weights_rand, weights)[0])\n",
    "    \n",
    "#     # reorder next list using stick breaking\n",
    "#     resorted_egg = presenter.order(shuffled_egg, method='stick')\n",
    "#     weights_stick = quail.analyze(resorted_egg, analysis='fingerprint')\n",
    "#     dist_stick.append(cdist(weights_stick, weights)[0])\n",
    "\n",
    "#     # reorder next list using stick breaking\n",
    "#     resorted_egg = presenter.order(shuffled_egg, method='best_stick', nperms=10000)\n",
    "#     weights_stick = quail.analyze(resorted_egg, analysis='fingerprint')\n",
    "#     dist_beststick.append(cdist(weights_stick, weights)[0])\n",
    "    \n",
    "#     # reorder next list using permutation\n",
    "#     resorted_egg = presenter.order(shuffled_egg, method='permute', nperms=10000)\n",
    "#     weights_perm = quail.analyze(resorted_egg, analysis='fingerprint')\n",
    "#     dist_perm.append(cdist(weights_perm, weights))\n",
    "    \n",
    "#     presenter.strategy = 'destabilize'\n",
    "    \n",
    "#     # reorder next list using permutation\n",
    "#     resorted_egg = presenter.order(shuffled_egg, method='permute', nperms=10000)\n",
    "#     weights_permde = quail.analyze(resorted_egg, analysis='fingerprint')\n",
    "#     dist_permde.append(cdist(weights_permde, weights))\n",
    "    \n",
    "#     # reorder next list using permutation\n",
    "# #     resorted_egg = presenter.order(shuffled_egg, method='best_choice', nperms=100)\n",
    "# #     weights_choice = quail.analyze(resorted_egg, analysis='fingerprint')\n",
    "# #     dist_bestchoice.append(cdist(weights_choice, weights)[0])\n",
    "    \n",
    "#     if iperm % 10 == 0:\n",
    "#         print(iperm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# sns.distplot(dist_stick, label='stick')\n",
    "# sns.distplot(dist_beststick, label='best stick')\n",
    "# # sns.distplot(dist_bestchoice, label='best choice')\n",
    "# sns.distplot(dist_perm, label='permute:stabilize')\n",
    "# sns.distplot(dist_permde, label='permute:destabilize')\n",
    "# sns.distplot(dist_rand, label='random')\n",
    "# sns.plt.legend()\n",
    "# sns.plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'category': <function quail.helpers.<lambda>>,\n",
       " 'color': <function quail.helpers.<lambda>>,\n",
       " 'first_letter': <function quail.helpers.<lambda>>,\n",
       " 'length': <function quail.helpers.<lambda>>,\n",
       " 'pos': <function quail.helpers.<lambda>>,\n",
       " 'size': <function quail.helpers.<lambda>>}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def loadstim():\n",
    "    \"\"\"Loads in the stimuli from disk and creates an egg\"\"\"\n",
    "\n",
    "    def shuffle_stim(wordpool, nlists=16, nwords=16):\n",
    "        \"\"\"Randomizes the stimuli\"\"\"\n",
    "        np.random.seed()\n",
    "        return pd.concat([wp[wp['GROUP']==choice].sample(nwords, replace=False).reset_index(drop=True) for choice in np.random.choice(wp['GROUP'].unique(), nlists, replace=False)])\n",
    "\n",
    "    def add_features(wp):\n",
    "        \"\"\"Adds features to the stimuli\"\"\"\n",
    "\n",
    "        # first letter\n",
    "        wp['FIRST LETTER'] = wp['WORD'].apply(lambda x: x[0])\n",
    "\n",
    "        # word length\n",
    "        wp['WORD LENGTH'] = wp['WORD'].apply(lambda x: len(x))\n",
    "\n",
    "        # color\n",
    "        wp['COLOR'] = [[int(np.random.rand() * 255) for i in range(3)] for i in range(wp.shape[0])]\n",
    "\n",
    "        # location\n",
    "        wp['LOCATION'] = [[np.random.rand() * 85, np.random.rand() * (100 - wp['WORD LENGTH'].iloc[i] * 3)] for i in range(wp.shape[0])]\n",
    "\n",
    "        return wp\n",
    "\n",
    "    def df2egg(df):\n",
    "        \"\"\"Converts a dataframe to an egg\"\"\"\n",
    "        group = df['GROUP'].unique()\n",
    "        pres = [df[df['GROUP']==i]['WORD'].values.tolist() for i in group]\n",
    "        rec = [[None] for i in group]\n",
    "        features = [format_features(df[df['GROUP']==i]) for i in group]\n",
    "        return quail.Egg(pres=[pres], rec=[rec], features=[features])\n",
    "\n",
    "    def format_features(wp):\n",
    "        \"\"\"Formats the features\"\"\"\n",
    "        trials=[]\n",
    "        for idx, row in wp.iterrows():\n",
    "            trial = {\n",
    "                'length' : row['WORD LENGTH'],\n",
    "                'size' : row['SIZE'],\n",
    "                'category' : row['CATEGORY'],\n",
    "                'pos' : row['LOCATION'],\n",
    "                'color' : row['COLOR'],\n",
    "                'first_letter' : row['WORD'][0]\n",
    "            }\n",
    "            trials.append(trial)\n",
    "        return trials\n",
    "\n",
    "    # load wordpool\n",
    "    wp = pd.read_csv('/Users/andyheusser/Documents/github/adaptiveFR/exp/static/files/cut_wordpool.csv')\n",
    "\n",
    "    # shuffle the lists and stim\n",
    "    shuffled_stim = shuffle_stim(wp)\n",
    "\n",
    "    # add features\n",
    "    stim_features = add_features(shuffled_stim)\n",
    "\n",
    "    # go from df to egg\n",
    "    egg = df2egg(stim_features)\n",
    "\n",
    "    return egg\n",
    "\n",
    "# create the stim list\n",
    "egg = loadstim()\n",
    "egg.dist_funcs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 loop, best of 3: 20.4 s per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "egg1 = egg.crack(lists=[0], subjects=[0])\n",
    "egg2 = egg.crack(lists=[1], subjects=[0])\n",
    "\n",
    "# initialize fingerprint\n",
    "fingerprint = Fingerprint(init=egg1)\n",
    "\n",
    "# initialize presenter\n",
    "params = {\n",
    "    'fingerprint' : fingerprint\n",
    "}\n",
    "presenter = OptimalPresenter(params=params, strategy='stabilize')\n",
    "\n",
    "# update the fingerprint\n",
    "fingerprint.update(egg1, permute=True, parallel=True)\n",
    "\n",
    "# reshape weights\n",
    "weights = fingerprint.state.reshape(1,6)\n",
    "\n",
    "# reorder next list using permutation\n",
    "resorted_egg = presenter.order(egg2, method='permute', nperms=2500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/andyheusser/Documents/github/quail/quail/analysis.py:105: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n",
      "  'list_length' : data.list_length\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process PoolWorker-4:\n",
      "Process PoolWorker-2:\n",
      "Process PoolWorker-3:\n",
      "Process PoolWorker-1:\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "    self.run()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "    task = get()\n",
      "    task = get()\n",
      "    task = get()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "    task = get()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "    racquire()\n",
      "    racquire()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 381, in get\n",
      "KeyboardInterrupt\n",
      "    racquire()\n",
      "    return recv()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-d02dbef354d6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# reorder next list using permutation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     \u001b[0mresorted_egg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpresenter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0megg2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'permute'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnperms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnperms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m     \u001b[0mweights_permde\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquail\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manalyze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresorted_egg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manalysis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'fingerprint'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpermute\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparallel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0mdist_permde\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcdist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights_permde\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'correlation'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/andyheusser/Documents/github/quail/quail/fingerprint.py\u001b[0m in \u001b[0;36morder\u001b[0;34m(self, egg, method, nperms, strategy, distfun)\u001b[0m\n\u001b[1;32m    318\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mshuffle_egg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0megg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'permute'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0morder_perm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0megg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnperms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistfun\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'stick'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0morder_stick\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0megg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/andyheusser/Documents/github/quail/quail/fingerprint.py\u001b[0m in \u001b[0;36morder_perm\u001b[0;34m(self, egg, dist_dict, strategy, nperm, distperm)\u001b[0m\n\u001b[1;32m    242\u001b[0m             \u001b[0mpres_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m             results = Parallel(n_jobs=multiprocessing.cpu_count())(\n\u001b[0m\u001b[1;32m    245\u001b[0m             delayed(rand_perm)(pres, features, dist_dict, dist_funcs) for i in range(nperms))\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/Canopy.app/appdata/canopy-1.7.4.3348.macosx-x86_64/Canopy.app/Contents/lib/python2.7/multiprocessing/__init__.pyc\u001b[0m in \u001b[0;36mcpu_count\u001b[0;34m()\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomm\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m                 \u001b[0mnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process PoolWorker-7:\n",
      "Process PoolWorker-5:\n",
      "Process PoolWorker-8:\n",
      "Process PoolWorker-6:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 258, in _bootstrap\n",
      "    self.run()\n",
      "    self.run()\n",
      "    self.run()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/process.py\", line 114, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "    task = get()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/pool.py\", line 102, in worker\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 381, in get\n",
      "    return recv()\n",
      "    task = get()\n",
      "    task = get()\n",
      "KeyboardInterrupt\n",
      "    task = get()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "    racquire()\n",
      "  File \"/Users/andyheusser/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/multiprocess/queues.py\", line 379, in get\n",
      "KeyboardInterrupt\n",
      "    racquire()\n",
      "    racquire()\n",
      "KeyboardInterrupt\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "nperms=100\n",
    "dist_stick = []\n",
    "dist_beststick = []\n",
    "dist_perm = []\n",
    "dist_permde = []\n",
    "dist_rand = []\n",
    "dist_bestchoice = []\n",
    "    \n",
    "for iperm in range(nperms):\n",
    "    \n",
    "    # generate a list from the word pool\n",
    "    lst1 = generate_lst(wp)\n",
    "    \n",
    "    # simulate an egg\n",
    "    egg1 = simulate_egg(lst1)\n",
    "    \n",
    "    # initialize fingerprint\n",
    "    fingerprint = Fingerprint(init=egg1)\n",
    "\n",
    "    # initialize presenter\n",
    "    params = {\n",
    "        'fingerprint' : fingerprint\n",
    "    }\n",
    "    presenter = OptimalPresenter(params=params, strategy='stabilize')\n",
    "\n",
    "    # update the fingerprint\n",
    "    fingerprint.update(egg1, permute=True, parallel=True)\n",
    "    \n",
    "    # reshape weights\n",
    "    weights = fingerprint.state.reshape(1,7)\n",
    "    \n",
    "    # generate another list from the word pool\n",
    "    lst2 = generate_lst(wp)\n",
    "    \n",
    "    # simulate egg 2\n",
    "    egg2 = simulate_egg(lst2)\n",
    "\n",
    "    weights_rand = quail.analyze(egg2, analysis='fingerprint', permute=True, parallel=True)\n",
    "    dist_rand.append(cdist(weights_rand, weights, 'correlation')[0])\n",
    "    \n",
    "    # reorder next list using stick breaking\n",
    "    resorted_egg = presenter.order(egg2, method='stick')\n",
    "    weights_stick = quail.analyze(resorted_egg, analysis='fingerprint', permute=True, parallel=True)\n",
    "    dist_stick.append(cdist(weights_stick, weights, 'correlation')[0])\n",
    "\n",
    "    # reorder next list using stick breaking\n",
    "    resorted_egg = presenter.order(egg2, method='best_stick', nperms=nperms)\n",
    "    weights_stick = quail.analyze(resorted_egg, analysis='fingerprint', permute=True, parallel=True)\n",
    "    dist_beststick.append(cdist(weights_stick, weights, 'correlation')[0])\n",
    "    \n",
    "    # reorder next list using permutation\n",
    "    resorted_egg = presenter.order(egg2, method='permute', nperms=nperms)\n",
    "    weights_perm = quail.analyze(resorted_egg, analysis='fingerprint', permute=True, parallel=True)\n",
    "    dist_perm.append(cdist(weights_perm, weights, 'correlation'))\n",
    "    \n",
    "    presenter.strategy = 'destabilize'\n",
    "    \n",
    "    # reorder next list using permutation\n",
    "    resorted_egg = presenter.order(egg2, method='permute', nperms=nperms)\n",
    "    weights_permde = quail.analyze(resorted_egg, analysis='fingerprint', permute=True, parallel=True)\n",
    "    dist_permde.append(cdist(weights_permde, weights, 'correlation'))\n",
    "\n",
    "    if iperm % 10 == 0:\n",
    "        print(iperm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'CATEGORY'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-67-8974ec0814c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmagic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mu'timeit'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mshuffled_egg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpresenter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0megg1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'random'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mresorted_egg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpresenter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshuffled_egg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'permute'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnperms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2500\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mweights_perm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquail\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manalyze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresorted_egg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manalysis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'fingerprint'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/andyheusser/Documents/github/quail/quail/fingerprint.py\u001b[0m in \u001b[0;36morder\u001b[0;34m(self, egg, method, nperms, strategy, distfun)\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0mstrategy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrategy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m         \u001b[0mdist_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_distances_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0megg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mstrategy\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'random'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'random'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/andyheusser/Documents/github/quail/quail/fingerprint.py\u001b[0m in \u001b[0;36mcompute_distances_dict\u001b[0;34m(egg)\u001b[0m\n\u001b[1;32m    651\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mfeature\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdist_funcs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    652\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 653\u001b[0;31m                 \u001b[0mdistances\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdist_funcs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfeatures_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    655\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdistances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'CATEGORY'"
     ]
    }
   ],
   "source": [
    "%timeit\n",
    "shuffled_egg = presenter.order(egg1, strategy='random')\n",
    "resorted_egg = presenter.order(shuffled_egg, method='permute', nperms=2500)\n",
    "weights_perm = quail.analyze(resorted_egg, analysis='fingerprint')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x10af4ba10>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10abc8cd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "sns.distplot(1-np.array(dist_stick), label='stick')\n",
    "sns.distplot(1-np.array(dist_beststick), label='best stick')\n",
    "# sns.distplot(dist_bestchoice, label='best choice')\n",
    "sns.distplot(1-np.array(dist_perm), label='permute:stabilize')\n",
    "sns.distplot(1-np.array(dist_permde), label='permute:destabilize')\n",
    "sns.distplot(1-np.array(dist_rand), label='random')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def shuffle_stim(wordpool, nlists=16, nwords=16):\n",
    "\n",
    "    return pd.concat([wp[wp['GROUP']==choice].sample(nwords).reset_index(drop=True) for choice in np.random.choice(wp['GROUP'].unique(), nlists, replace=False)])\n",
    "\n",
    "def add_features(wp):\n",
    "    \n",
    "    # first letter\n",
    "    wp['FIRST LETTER'] = wp['WORD'].apply(lambda x: x[0])\n",
    "\n",
    "    # word length\n",
    "    wp['WORD LENGTH'] = wp['WORD'].apply(lambda x: len(x))\n",
    "\n",
    "    # color\n",
    "    wp['COLOR'] = [[int(np.random.rand() * 255) for i in range(3)] for i in range(wp.shape[0])]\n",
    "\n",
    "    # location\n",
    "    wp['LOCATION'] = [[np.random.rand() * 85, np.random.rand() * (100 - wp['WORD LENGTH'].iloc[i] * 3)] for i in range(wp.shape[0])]\n",
    "\n",
    "    return wp\n",
    "\n",
    "def df2egg(df):\n",
    "    group = df['GROUP'].unique()\n",
    "    pres = [df[df['GROUP']==i]['WORD'].values.tolist() for i in group]\n",
    "    rec = [[None] for i in group]\n",
    "    features = [format_features(df[df['GROUP']==i]) for i in group]\n",
    "    return quail.Egg(pres=[pres], rec=[rec], features=[features])\n",
    "    \n",
    "def format_features(wp):\n",
    "    trials=[]\n",
    "    for idx, row in wp.iterrows():\n",
    "        trial = {\n",
    "            'length' : row['WORD LENGTH'],\n",
    "            'size' : row['SIZE'],\n",
    "            'category' : row['CATEGORY'],\n",
    "            'pos' : row['LOCATION'],\n",
    "            'color' : row['COLOR'],\n",
    "            'first letter' : row['WORD'][0]\n",
    "        }\n",
    "        trials.append(trial)\n",
    "    return trials\n",
    "\n",
    "# load wordpool\n",
    "wp = pd.read_csv('/Users/andyheusser/Documents/github/quail/quail/data/cut_wordpool.csv')\n",
    "\n",
    "# shuffle the lists and stim\n",
    "shuffled_stim = shuffle_stim(wp)\n",
    "\n",
    "# add features\n",
    "stim_features = add_features(shuffled_stim)\n",
    "\n",
    "egg = df2egg(stim_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'CATEGORY': <function quail.helpers.<lambda>>,\n",
       " 'COLOR': <function quail.helpers.<lambda>>,\n",
       " 'FIRST LETTER': <function quail.helpers.<lambda>>,\n",
       " 'GROUP': <function quail.helpers.<lambda>>,\n",
       " 'LOCATION': <function quail.helpers.<lambda>>,\n",
       " 'SIZE': <function quail.helpers.<lambda>>,\n",
       " 'WORD LENGTH': <function quail.helpers.<lambda>>,\n",
       " 'category': <function quail.helpers.<lambda>>,\n",
       " 'color': <function quail.helpers.<lambda>>,\n",
       " 'first letter': <function quail.helpers.<lambda>>,\n",
       " 'length': <function quail.helpers.<lambda>>,\n",
       " 'pos': <function quail.helpers.<lambda>>,\n",
       " 'size': <function quail.helpers.<lambda>>}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "egg.dist_funcs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# generate a list from the word pool\n",
    "lst1 = generate_lst(wp)\n",
    "\n",
    "# simulate an egg\n",
    "egg = simulate_egg(lst1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# def format_stim(wp):\n",
    "#     trials=[]\n",
    "#     for idx, row in wp.iterrows():\n",
    "#         trial = {\n",
    "#             'type' : 'p',\n",
    "#             'text' : row['WORD'],\n",
    "#             'length' : row['WORD LENGTH'],\n",
    "#             'size' : row['SIZE'],\n",
    "#             'category' : row['CATEGORY'],\n",
    "#             'listid' : row['GROUP'],\n",
    "#             'pos' : row['LOCATION'],\n",
    "#             'rgb' : row['COLOR'],\n",
    "#         }\n",
    "#         trials.append(trial)\n",
    "#     return trials"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
